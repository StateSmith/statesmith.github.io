// Autogenerated with StateSmith 0.8.13-alpha.
// Algorithm: Balanced1. See https://github.com/StateSmith/StateSmith/wiki/Algorithms

// Generated state machine
class Ex09 extends Ex10Base
{
    static EventId = 
    {
        DO : 0, // The `do` event is special. State event handlers do not consume this event (ancestors all get it too) unless a transition occurs.
        DIM : 1,
        INCREASE : 2,
    }
    static { Object.freeze(this.EventId); }
    
    static EventIdCount = 3;
    static { Object.freeze(this.EventIdCount); }
    
    static StateId = 
    {
        ROOT : 0,
        OFF : 1,
        ON_HOT : 2,
        ON1 : 3,
    }
    static { Object.freeze(this.StateId); }
    
    static StateIdCount = 4;
    static { Object.freeze(this.StateIdCount); }
    
    // Used internally by state machine. Feel free to inspect, but don't modify.
    stateId;
    
    // Used internally by state machine. Don't modify.
    #ancestorEventHandler;
    
    // Used internally by state machine. Don't modify.
    #currentEventHandlers = Array(Ex09.EventIdCount).fill(undefined);
    
    // Used internally by state machine. Don't modify.
    #currentStateExitHandler;
    
    // Variables. Can be used for inputs, outputs, user variables...
    vars = {
        t1_start_ms: 0,
        count: 0,
        switch_is_on: false,
    };
    
    // Starts the state machine. Must be called before dispatching events. Not thread safe.
    start()
    {
        this.#ROOT_enter();
        // ROOT behavior
        // uml: TransitionTo(ROOT.InitialState)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
            
            // Step 2: Transition action: ``.
            
            // Step 3: Enter/move towards transition target `ROOT.InitialState`.
            // ROOT.InitialState is a pseudo state and cannot have an `enter` trigger.
            
            // ROOT.InitialState behavior
            // uml: / { trace_transition("14"); } TransitionTo(OFF)
            {
                // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition). Already at LCA, no exiting required.
                
                // Step 2: Transition action: `trace_transition("14");`.
                this.trace_transition("14");
                
                // Step 3: Enter/move towards transition target `OFF`.
                this.#OFF_enter();
                
                // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
                this.stateId = Ex09.StateId.OFF;
                // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
                return;
            } // end of behavior for ROOT.InitialState
        } // end of behavior for ROOT
    }
    
    // Dispatches an event to the state machine. Not thread safe.
    dispatchEvent(eventId)
    {
        let behaviorFunc = this.#currentEventHandlers[eventId];
        
        while (behaviorFunc != null)
        {
            this.#ancestorEventHandler = null;
            behaviorFunc.call(this);
            behaviorFunc = this.#ancestorEventHandler;
        }
    }
    
    // This function is used when StateSmith doesn't know what the active leaf state is at
    // compile time due to sub states or when multiple states need to be exited.
    #exitUpToStateHandler(desiredStateExitHandler)
    {
        while (this.#currentStateExitHandler != desiredStateExitHandler)
        {
            this.#currentStateExitHandler.call(this);
        }
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ROOT
    ////////////////////////////////////////////////////////////////////////////////
    
    #ROOT_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ROOT_exit;
    }
    
    #ROOT_exit()
    {
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state OFF
    ////////////////////////////////////////////////////////////////////////////////
    
    #OFF_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#OFF_exit;
        this.#currentEventHandlers[Ex09.EventId.INCREASE] = this.#OFF_increase;
        
        // OFF behavior
        // uml: enter / { trace_enter("OFF", "16"); }
        {
            // Step 1: execute action `trace_enter("OFF", "16");`
            this.trace_enter("OFF", "16");
        } // end of behavior for OFF
        
        // OFF behavior
        // uml: enter / { trace_action("light_off();", "17", "enter / { light_off(); }");light_off(); }
        {
            // Step 1: execute action `trace_action("light_off();", "17", "enter / { light_off(); }");light_off();`
            this.trace_action("light_off();", "17", "enter / { light_off(); }");this.light_off();
        } // end of behavior for OFF
    }
    
    #OFF_exit()
    {
        // OFF behavior
        // uml: exit / { trace_exit("OFF", "16"); }
        {
            // Step 1: execute action `trace_exit("OFF", "16");`
            this.trace_exit("OFF", "16");
        } // end of behavior for OFF
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Ex09.EventId.INCREASE] = null;  // no ancestor listens to this event
    }
    
    #OFF_increase()
    {
        // No ancestor state handles `increase` event.
        
        // OFF behavior
        // uml: INCREASE / { trace_transition("37"); } TransitionTo(ON1)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#OFF_exit();
            
            // Step 2: Transition action: `trace_transition("37");`.
            this.trace_transition("37");
            
            // Step 3: Enter/move towards transition target `ON1`.
            this.#ON1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Ex09.StateId.ON1;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for OFF
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON_HOT
    ////////////////////////////////////////////////////////////////////////////////
    
    #ON_HOT_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ON_HOT_exit;
        this.#currentEventHandlers[Ex09.EventId.DO] = this.#ON_HOT_do;
        this.#currentEventHandlers[Ex09.EventId.INCREASE] = this.#ON_HOT_increase;
        
        // ON_HOT behavior
        // uml: enter / { trace_enter("ON_HOT", "19"); }
        {
            // Step 1: execute action `trace_enter("ON_HOT", "19");`
            this.trace_enter("ON_HOT", "19");
        } // end of behavior for ON_HOT
        
        // ON_HOT behavior
        // uml: enter / { trace_action("t1Restart(); //timer1\\nlight_red();", "20", "enter / { t1Restart(); //timer1\\nlight_red(); }");t1Restart(); //timer1\nlight_red(); }
        {
            // Step 1: execute action `trace_action("t1Restart(); //timer1\\nlight_red();", "20", "enter / { t1Restart(); //timer1\\nlight_red(); }");t1Restart(); //timer1\nlight_red();`
            this.trace_action("t1Restart(); //timer1\\nlight_red();", "20", "enter / { t1Restart(); //timer1\\nlight_red(); }");this.vars.t1_start_ms = Date.now(); //timer1
            this.light_red();
        } // end of behavior for ON_HOT
    }
    
    #ON_HOT_exit()
    {
        // ON_HOT behavior
        // uml: exit / { trace_exit("ON_HOT", "19"); }
        {
            // Step 1: execute action `trace_exit("ON_HOT", "19");`
            this.trace_exit("ON_HOT", "19");
        } // end of behavior for ON_HOT
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Ex09.EventId.DO] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[Ex09.EventId.INCREASE] = null;  // no ancestor listens to this event
    }
    
    #ON_HOT_do()
    {
        // No ancestor state handles `do` event.
        
        // ON_HOT behavior
        // uml: do [t1After(2.1s)] / { trace_transition("40"); } TransitionTo(ON1)
        if (Date.now() - this.vars.t1_start_ms >= 2100)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#ON_HOT_exit();
            
            // Step 2: Transition action: `trace_transition("40");`.
            this.trace_transition("40");
            
            // Step 3: Enter/move towards transition target `ON1`.
            this.#ON1_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Ex09.StateId.ON1;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for ON_HOT
    }
    
    #ON_HOT_increase()
    {
        // No ancestor state handles `increase` event.
        
        // ON_HOT behavior
        // uml: INCREASE / { trace_action("t1Restart();", "41", "INCREASE / { t1Restart(); }");t1Restart(); }
        {
            // Step 1: execute action `trace_action("t1Restart();", "41", "INCREASE / { t1Restart(); }");t1Restart();`
            this.trace_action("t1Restart();", "41", "INCREASE / { t1Restart(); }");this.vars.t1_start_ms = Date.now();
            
            // Step 2: determine if ancestor gets to handle event next.
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
        } // end of behavior for ON_HOT
    }
    
    
    ////////////////////////////////////////////////////////////////////////////////
    // event handlers for state ON1
    ////////////////////////////////////////////////////////////////////////////////
    
    #ON1_enter()
    {
        // setup trigger/event handlers
        this.#currentStateExitHandler = this.#ON1_exit;
        this.#currentEventHandlers[Ex09.EventId.DIM] = this.#ON1_dim;
        this.#currentEventHandlers[Ex09.EventId.INCREASE] = this.#ON1_increase;
        
        // ON1 behavior
        // uml: enter / { trace_enter("ON1", "25"); }
        {
            // Step 1: execute action `trace_enter("ON1", "25");`
            this.trace_enter("ON1", "25");
        } // end of behavior for ON1
        
        // ON1 behavior
        // uml: enter / { trace_action("light_blue();", "26", "enter / { light_blue(); }");light_blue(); }
        {
            // Step 1: execute action `trace_action("light_blue();", "26", "enter / { light_blue(); }");light_blue();`
            this.trace_action("light_blue();", "26", "enter / { light_blue(); }");this.light_blue();
        } // end of behavior for ON1
    }
    
    #ON1_exit()
    {
        // ON1 behavior
        // uml: exit / { trace_exit("ON1", "25"); }
        {
            // Step 1: execute action `trace_exit("ON1", "25");`
            this.trace_exit("ON1", "25");
        } // end of behavior for ON1
        
        // adjust function pointers for this state's exit
        this.#currentStateExitHandler = this.#ROOT_exit;
        this.#currentEventHandlers[Ex09.EventId.DIM] = null;  // no ancestor listens to this event
        this.#currentEventHandlers[Ex09.EventId.INCREASE] = null;  // no ancestor listens to this event
    }
    
    #ON1_dim()
    {
        // No ancestor state handles `dim` event.
        
        // ON1 behavior
        // uml: DIM / { trace_transition("32"); } TransitionTo(OFF)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#ON1_exit();
            
            // Step 2: Transition action: `trace_transition("32");`.
            this.trace_transition("32");
            
            // Step 3: Enter/move towards transition target `OFF`.
            this.#OFF_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Ex09.StateId.OFF;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for ON1
    }
    
    #ON1_increase()
    {
        // No ancestor state handles `increase` event.
        
        // ON1 behavior
        // uml: INCREASE / { trace_transition("31"); } TransitionTo(ON_HOT)
        {
            // Step 1: Exit states until we reach `ROOT` state (Least Common Ancestor for transition).
            this.#ON1_exit();
            
            // Step 2: Transition action: `trace_transition("31");`.
            this.trace_transition("31");
            
            // Step 3: Enter/move towards transition target `ON_HOT`.
            this.#ON_HOT_enter();
            
            // Step 4: complete transition. Ends event dispatch. No other behaviors are checked.
            this.stateId = Ex09.StateId.ON_HOT;
            // No ancestor handles event. Can skip nulling `ancestorEventHandler`.
            return;
        } // end of behavior for ON1
    }
    
    // Thread safe.
    static stateIdToString(id)
    {
        switch (id)
        {
            case Ex09.StateId.ROOT: return "ROOT";
            case Ex09.StateId.OFF: return "OFF";
            case Ex09.StateId.ON_HOT: return "ON_HOT";
            case Ex09.StateId.ON1: return "ON1";
            default: return "?";
        }
    }
    
    // Thread safe.
    static eventIdToString(id)
    {
        switch (id)
        {
            case Ex09.EventId.DIM: return "DIM";
            case Ex09.EventId.DO: return "DO";
            case Ex09.EventId.INCREASE: return "INCREASE";
            default: return "?";
        }
    }
}
